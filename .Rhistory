linear <- function(x){x}
relu <- function(x){ifelse(x < 0 , 0, x )}
sigmoid <- function(x) { 1 / (1 + exp(-x)) }
linearDeriv <- function(x){1}
reluDeriv <- function(x){ifelse(x < 0 , 0, 1 )}
sigmoidDeriv <- function(x) { sigmoid(x)* (1- sigmoid(x))}
tanhDeriv <- function(x) {1 - tanh(x)^2}
# Chargez la bibliothèque rmarkdown si ce n'est pas déjà fait
if (!requireNamespace("rmarkdown", quietly = TRUE)) {
install.packages("rmarkdown")
}
library(rmarkdown)
# Rendez le document en PDF
render("part1.Rmd", output_format = "pdf_document")
layerSizes <- c(5,3,2) # 5 inputs, 3 intermediate neurons (=layer1), 2 outputs (=layer2)
createRandomWeightsByLayer <- function(layerSizes) {
numberOfLayers <- length(layerSizes)-1
weightsByLayer <- vector("list", numberOfLayers)
for(i in 1:numberOfLayers) {
nrows <- layerSizes[i]+1
ncols <- layerSizes[i+1]
# random initialization of weights according to LeCun and Bottou
# E(weight)=0 , V(weight)=1/number_of_inputs
weightsByLayer[[i]] <- matrix(data = rnorm(n=nrows*ncols,mean=0,sd=sqrt(1/nrows)),nrow = nrows)
}
return(weightsByLayer)
}
render("part1.Rmd", output_format = "pdf_document")
# Chargez la bibliothèque rmarkdown si ce n'est pas déjà fait
if (!requireNamespace("rmarkdown", quietly = TRUE)) {
install.packages("rmarkdown")
}
library(rmarkdown)
# Rendez le document en PDF
render("part1.Rmd")
layerSizes <- c(5,3,2) # 5 inputs, 3 intermediate neurons (=layer1), 2 outputs (=layer2)
createRandomWeightsByLayer <- function(layerSizes) {
numberOfLayers <- length(layerSizes)-1
weightsByLayer <- vector("list", numberOfLayers)
for(i in 1:numberOfLayers) {
nrows <- layerSizes[i]+1
ncols <- layerSizes[i+1]
# random initialization of weights according to LeCun and Bottou
# E(weight)=0 , V(weight)=1/number_of_inputs
weightsByLayer[[i]] <- matrix(data = rnorm(n=nrows*ncols,mean=0,sd=sqrt(1/nrows)),nrow = nrows)
}
return(weightsByLayer)
}
